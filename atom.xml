<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风之落木</title>
  
  <subtitle>寄君一曲，不问曲终人聚散。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-23T02:56:20.746Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王邦雄</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux文件与目录管理</title>
    <link href="http://yoursite.com/2020/03/19/Linux%20%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/19/Linux%20%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</id>
    <published>2020-03-18T16:00:00.000Z</published>
    <updated>2020-03-23T02:56:20.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、常见的处理目录命令"><a href="#一、常见的处理目录命令" class="headerlink" title="一、常见的处理目录命令"></a>一、常见的处理目录命令</h1><p>ls: 列出目录<br>cd：切换目录<br>pwd：显示目前的目录<br> <a id="more"></a> mkdir：创建一个新的目录<br>rmdir：删除一个空的目录<br>cp: 复制文件或目录<br>rm: 移除文件或目录<br>mv: 移动文件与目录，或修改文件与目录的名称  </p><h2 id="1、ls-命令"><a href="#1、ls-命令" class="headerlink" title="1、ls 命令"></a>1、ls 命令</h2><p>语法：<code>ls 目录名称</code><br>[root@www ~]# ls -a 目录名称<br>[root@www ~]# ls -d 目录名称<br>[root@www ~]# ls -l 目录名称<br>选项与参数：<br>-a ：列出全部的文件，包括隐藏文件。<br>-d ：只列出目录本身。<br>-l ：长数据串列出，包含文件的属性与权限等等数据。</p><h2 id="2、cd-命令"><a href="#2、cd-命令" class="headerlink" title="2、cd 命令"></a>2、cd 命令</h2><p>用来切换工作目录的命令。<br>语法：<code>cd [相对路径或绝对路径]</code></p><ul><li>使用绝对路径切换到 test 目录<code>cd /root/test/</code></li><li>使用相对路径切换到 test 目录<code>cd ./runoob/</code></li><li>切换到家目录，即 /root 目录<code>cd ~</code></li><li>切换到当前的上一级目录，即 /root 的上一级目录<code>cd ..</code><h2 id="3、pwd-命令"><a href="#3、pwd-命令" class="headerlink" title="3、pwd 命令"></a>3、pwd 命令</h2>pwd 是显示当前所在目录的命令。<br>语法： <code>pwd [-P]</code><br>选项与参数：</li><li>P ：显示出完整的路径。<h2 id="4、mkdir-命令"><a href="#4、mkdir-命令" class="headerlink" title="4、mkdir 命令"></a>4、mkdir 命令</h2>使用 mkdir 命令创建一个新的目录<br>语法：<code>mkdir 目录名称[test]</code><br>选项与参数：</li><li>m ：配置文件的权限，直接配置。</li><li>p ：可以自行帮你创建多层目录。<h2 id="5、rmdir-命令"><a href="#5、rmdir-命令" class="headerlink" title="5、rmdir 命令"></a>5、rmdir 命令</h2>使用rmdir 命令删除空的目录<br>语法：<code>rmdir [-p] 目录名称</code><br>选项与参数：</li><li>p ：连同上一级『空的』目录也一起删除<br><code>注意：rmdir 只能删除空的目录，可以使用 rm 命令来删除非空目录。</code></li></ul><h2 id="6、cp-命令"><a href="#6、cp-命令" class="headerlink" title="6、cp 命令"></a>6、cp 命令</h2><p>使用cp命令复制文件或目录。<br>语法:<code>cp - [a d f i l p r s u] 来源档(source) 目标档(destination)</code><br>选项与参数：<br>-a：相当于 -pdr 。</p><p>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身。</p><p>-f：若目标文件已经存在且无法开启，则移除后再尝试一次。</p><p>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行。</p><p>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</p><p>-p：连同文件的属性一起复制过去。</p><p>-r：递归持续复制，用于目录的复制。</p><p>-s：复制成为符号连结档 (symbolic link)。</p><p>-u：若 destination 比 source 旧才升级 destination。</p><h2 id="7、rm-命令"><a href="#7、rm-命令" class="headerlink" title="7、rm 命令"></a>7、rm 命令</h2><p>使用rm命令移除文件或目录<br>语法：<code>rm [-fir] 文件或目录</code><br>选项与参数：<br>-f ：忽略不存在的文件，不会出现警告信息。</p><p>-i ：互动模式，在删除前会询问使用者是否动作。<br>-r ：递归删除</p><h2 id="8、mv"><a href="#8、mv" class="headerlink" title="8、mv"></a>8、mv</h2><p>使用 mv 命令移动文件与目录。<br>语法：<code>mv [-fiu] source destination</code><br>选项与参数：</p><p>-f ：若目标文件已存在，不会询问而直接覆盖。</p><p>-i ：若目标文件已存在，就会询问是否覆盖。</p><p>-u ：若目标文件已存在，且 source 比较新，才会升级 (update)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、常见的处理目录命令&quot;&gt;&lt;a href=&quot;#一、常见的处理目录命令&quot; class=&quot;headerlink&quot; title=&quot;一、常见的处理目录命令&quot;&gt;&lt;/a&gt;一、常见的处理目录命令&lt;/h1&gt;&lt;p&gt;ls: 列出目录&lt;br&gt;cd：切换目录&lt;br&gt;pwd：显示目前的目录&lt;br&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP 协议</title>
    <link href="http://yoursite.com/2020/03/19/TCP%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/03/19/TCP%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-03-18T16:00:00.000Z</published>
    <updated>2020-03-22T07:18:41.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP传输控制协议"><a href="#TCP传输控制协议" class="headerlink" title="TCP传输控制协议"></a>TCP传输控制协议</h1><p>TCP传输控制协议是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接。 <a id="more"></a> </p><h3 id="三次握手与四次挥手"><a href="#三次握手与四次挥手" class="headerlink" title="三次握手与四次挥手"></a>三次握手与四次挥手</h3><h5 id="1、建立TCP连接（三次握手）"><a href="#1、建立TCP连接（三次握手）" class="headerlink" title="1、建立TCP连接（三次握手）"></a>1、建立TCP连接（三次握手）</h5><p>第一次握手：客户端发送TCP报文到服务器，等待服务器确认。<br>第二次握手：服务器端接收客户端发来的报文并确认，同时自己也发送一个SYN包给客户端，询问客户端是否准备好进行数据通讯。<br>第三次握手： 客户端收到服务器的SYN+ACK包，并回应服务端一个ACK报文。</p><h5 id="2、终止TCP连接（四次挥手）"><a href="#2、终止TCP连接（四次挥手）" class="headerlink" title="2、终止TCP连接（四次挥手）"></a>2、终止TCP连接（四次挥手）</h5><p>第一次挥手：客户端发出连接释放报文，并且停止客户端到服务器的数据传送。<br>第二次挥手：服务器收到连接释放报文，发出确认报文。<br>第三次挥手：服务器发送一个FIN给客户端，用来关闭与客户端的数据传送。<br>第四次挥手：客户段收到FIN后发回一个ACK报文给服务器，完成四次挥手。</p><h5 id="为什么连接时是三次握手，释放时却是四次握手？"><a href="#为什么连接时是三次握手，释放时却是四次握手？" class="headerlink" title="为什么连接时是三次握手，释放时却是四次握手？"></a>为什么连接时是三次握手，释放时却是四次握手？</h5><p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><h5 id="如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h5><p>TCP还设有一个保活计时器。服务器每收到一次客户端的请求后都会重新复位这个计时器，若没有收到客户端的任何数据，服务器就会发送一个探测报文段。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h3 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h3><p>TCP：提供的是面向连接的、传输效率低，可靠性强<br>UDP：提供的是非面向连接的、适用于传输可靠性要求不高，数据量小的数据</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP传输控制协议&quot;&gt;&lt;a href=&quot;#TCP传输控制协议&quot; class=&quot;headerlink&quot; title=&quot;TCP传输控制协议&quot;&gt;&lt;/a&gt;TCP传输控制协议&lt;/h1&gt;&lt;p&gt;TCP传输控制协议是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接。
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux vim显示行号的设置方法</title>
    <link href="http://yoursite.com/2020/03/18/Linux%20vim%E6%98%BE%E7%A4%BA%E8%A1%8C%E5%8F%B7%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/18/Linux%20vim%E6%98%BE%E7%A4%BA%E8%A1%8C%E5%8F%B7%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-03-22T02:05:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，vim打开文件时不提示行号。<br>临时显示行号：<code>在vim模式下输入 set nu 命令。</code><br>关闭当前打开的vim后就失效。<a id="more"></a><br>如果想每次打开vim都显示行号，则需要修改其配置文件，用户的配置文件放在用户主目录下以 <code>.vimrc</code> 命名。<br>修改配置文件：<br>输入命令：vim   ~/.vimrc，打开文件后，添加 set nu，保存退出，再次用vim打开文件时就可以显示行号了。</p><p>取消显示行号：<code>在vim命令行模式下输入set nonu</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认情况下，vim打开文件时不提示行号。&lt;br&gt;临时显示行号：&lt;code&gt;在vim模式下输入 set nu 命令。&lt;/code&gt;&lt;br&gt;关闭当前打开的vim后就失效。
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>功能测试</title>
    <link href="http://yoursite.com/2020/03/18/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2020/03/18/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-03-22T07:18:55.292Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能测试的概念"><a href="#功能测试的概念" class="headerlink" title="功能测试的概念"></a>功能测试的概念</h3><p>功能测试就是对产品的各功能进行验证，根据功能测试用例逐项测试，检查产品是否达到用户要求的功能；只需要考虑它的功能点不需要考虑软件的内部结构及代码等。<a id="more"></a> </p><h6 id="1-1图形测试"><a href="#1-1图形测试" class="headerlink" title="1.1图形测试"></a>1.1图形测试</h6><p>包括图片、动画、边框、颜色、字体、背景、按钮等。<br>其中要考虑以下几个重点：<br>（1）图片要有明确的用途；图片尺寸尽量小，格式一般采用JPG/GIF。<br>（2）页面整体风格是否和系统的用途一致。<br>（3）背景颜色、字体搭配是否合理。</p><h6 id="1-2表单测试"><a href="#1-2表单测试" class="headerlink" title="1.2表单测试"></a>1.2表单测试</h6><p>当用户在web应用系统上向服务器提交信息时，就需要使用表单操作，例如用户注册，登录，信息变更等。在该情况下，我们必须测试提交信息的完整性，以检验提交给服务器的数据的正确性。</p><h6 id="1-3内容测试"><a href="#1-3内容测试" class="headerlink" title="1.3内容测试"></a>1.3内容测试</h6><p>主要用来检测web系统提供信息的准确性、相关性。如：信息的准确性，拼写是否有误；价格，文字描述是否有误；信息的相关性，如相关文章列表，视频列表等。</p><h6 id="1-4链接测试"><a href="#1-4链接测试" class="headerlink" title="1.4链接测试"></a>1.4链接测试</h6><p> 链接主要用于页面之间切换跳转，指导用户去一些不知道地址的页面的主要手段，链接测试一般关注三点：<br>（1）链接是否按照既定指示那样，确实链接到了该链接的界面。<br>（2）测试该链接所链接的页面是否真的存在。<br>（3）保证系统中没有单独存在的页面。</p><h6 id="1-5导航测试"><a href="#1-5导航测试" class="headerlink" title="1.5导航测试"></a>1.5导航测试</h6><p>导航测试就是在不同的页面跳转之间，通过按钮，对话框，列表以及窗口等因素，去判断一个应用系统是否易于导航；是否直观；站点是否需要站内地图或者搜索引擎等其他帮助；web系统导航的另外一个重点就是页面结构、导航、菜单、风格等是否一致。确保用户可以凭借简单的判断就可以找到自己想要的内容。</p><h6 id="1-6整体界面测试"><a href="#1-6整体界面测试" class="headerlink" title="1.6整体界面测试"></a>1.6整体界面测试</h6><p>整体界面测试就是测试用户浏览时是否感觉舒适。一般做一个类似问卷调查的形式，来判定用户的反馈信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;功能测试的概念&quot;&gt;&lt;a href=&quot;#功能测试的概念&quot; class=&quot;headerlink&quot; title=&quot;功能测试的概念&quot;&gt;&lt;/a&gt;功能测试的概念&lt;/h3&gt;&lt;p&gt;功能测试就是对产品的各功能进行验证，根据功能测试用例逐项测试，检查产品是否达到用户要求的功能；只需要考虑它的功能点不需要考虑软件的内部结构及代码等。
    
    </summary>
    
    
    
      <category term="软件测试" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机的工作原理</title>
    <link href="http://yoursite.com/2020/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-04-25T08:58:19.620Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1．计算机的工作原理"><a href="#1．计算机的工作原理" class="headerlink" title="1．计算机的工作原理"></a>1．计算机的工作原理</h5><p>计算机的工作就是顺序执行存放在内存储器中的一系列指令。</p><a id="more"></a><p><strong>1.1    指令、指令系统与程序</strong><br>指令是一组能被计算机识别并执行的二进制数据代码，是让计算机完成某个操作的命令。一条指令通常由两个部分组成，前面部分称为操作码，后面部分是操作数。操作码指明该条指令要完成的操作，如加、减、乘、除，逻辑运算等。操作数是指参加<br>运算的数据或者数据所在的存储单元地址。<br>一台计算机的所有指令的集合，称为该计算机的指令系统。指令系统与计算机的中央处理器 CPU 密切相关，反映、决定了计算机硬件系统的基本功能和主要性能。<br>指令系统都应具有的功能指令：<br>⑴ 数据传送指令：将数据在内存与 CPU 之间进行传送。<br>⑵ 数据处理指令：对数据进行算术或逻辑运算。<br>⑶ 程序控制指令：控制程序中指令的执行顺序，<br>⑷ 输入／输出指令：用于实现外部设备与主机之间的数据传输。<br>⑸ 其他指令：对计算机系统的其它管理功能。<br><strong>1.2    计算机的工作原理</strong><br>计算机的工作过程实际上就是执行指令的过程。计算机在执行指令的过程中，有两种数据在计算机系统的各部件之间流动，它们是数据流和控制流。数据流指的是计算机处理的原始数据、中间结果和最终结果数据、源程序代码等。控制流是控制器对指令代码进行分析、解释后向计算机系统的各部件发出的控制命令，指挥整个计算机系统协调地进行工作。<br><img src="https://img-blog.csdnimg.cn/20200425164557452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dieHNoaQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>计算机执行指令的过程可分为四个步骤：<br>⑴ 读取指令：根据控制器程序计数器中的地址（0100H），从内存储器中读取指令（070270H），传送到指令寄存器中。<br>⑵ 分析指令：对送到指令寄存器的指令（070270H）进行分析，由译码器对操作码（07H）进行译码，判断该条指令要做的操作，并将其转换成相应的控制电信号；操作数（0270H）则确定了被操作数据的存放地址。<br>⑶ 执行指令：操作控制电路根据译码结果向相关部件发出完成该项操作所需的一系列控制电信号，以完成该项指令所要求的操作。例如，若是做加法的指令，则将内存单元（0270H）中的数据与累加器中的数据相加，结果仍然放在累加器中。<br>⑷ 更新计数器：一条指令执行完后，程序计数器自动加 1，或将转移地址码送入程序计数器后，返回到⑴，进入下一条指令的执行过程。如此周而复始，CPU 不断的读取指令、分析指令、执行指令 …… 直到整个程序执行完毕。这就是计算机的工作过程，程序的执行过程。<br>一般将计算机执行一条指令所需的时间称为一个指令周期。指令周期越短，执行速度越快。计算机系统的所有操作都是在一个统一的脉冲信号的控制下进行的。脉冲信号的频率越高，执行指令的速度就越快。通常所说的计算机工作频率，指的就是同步脉冲信号的频率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1．计算机的工作原理&quot;&gt;&lt;a href=&quot;#1．计算机的工作原理&quot; class=&quot;headerlink&quot; title=&quot;1．计算机的工作原理&quot;&gt;&lt;/a&gt;1．计算机的工作原理&lt;/h5&gt;&lt;p&gt;计算机的工作就是顺序执行存放在内存储器中的一系列指令。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL 数据库基础知识</title>
    <link href="http://yoursite.com/2020/03/17/SQL%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/03/17/SQL%20%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-16T16:00:00.000Z</published>
    <updated>2020-03-22T02:04:55.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、SQL-SELECT-语句"><a href="#1、SQL-SELECT-语句" class="headerlink" title="1、SQL SELECT 语句"></a>1、SQL SELECT 语句</h1><p>SELECT 语句用于从数据库中选取数据，结果被存储在一个结果表中。<br>语法：<code>SELECT 列名称 FROM 表名;</code>与<code>与SELECT * FROM 表名;</code>  <a id="more"></a> </p><h1 id="2、SQL-SELECT-DISTINCT-语句"><a href="#2、SQL-SELECT-DISTINCT-语句" class="headerlink" title="2、SQL SELECT DISTINCT 语句"></a>2、SQL SELECT DISTINCT 语句</h1><p>SELECT DISTINCT 语句用于返回唯一不同的值。<br>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 列名称 FROM 表名;</span><br></pre></td></tr></table></figure><h1 id="3、SQL-WHERE-子句"><a href="#3、SQL-WHERE-子句" class="headerlink" title="3、SQL WHERE 子句"></a>3、SQL WHERE 子句</h1><p>WHERE 子句用于提取那些满足指定条件的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">SELECT 列名 FROM 表名</span><br><span class="line">WHERE 列名 operator value;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实例：从 &quot;test&quot; 表中选取地名为 &quot;SH&quot; 的所有网站</span><br><span class="line">SELECT * FROM test WHERE place&#x3D;&#39;SH&#39;;</span><br></pre></td></tr></table></figure><p>SQL 使用单引号来环绕文本值，如果是数值字段，不使用引号。<br>如：<code>SELECT * FROM test WHERE value=1;</code><br>WHERE 子句中的运算符<br>运算符     | 描述<br>——– | —–<br>=  | 等于<br>&lt;&gt;或！=  | 不等于</p><blockquote><p> | 大于<br>&lt;  | 小于<br>=  | 大于等于<br>&lt;=  | 小于等于<br>LIKE  | 搜索某种模式<br>BETWEEN | 在某个范围内<br>IN    | 指定针对某个列的多个可能值</p></blockquote><h1 id="4、SQL-AND-amp-OR-运算符"><a href="#4、SQL-AND-amp-OR-运算符" class="headerlink" title="4、SQL AND &amp; OR 运算符"></a>4、SQL AND &amp; OR 运算符</h1><p>AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。</p><ul><li>若第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</li><li>若第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</li></ul><p>把 AND 和 OR 结合起来，使用圆括号来组成复杂的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">SELECT * FROM test</span><br><span class="line">WHERE id &gt; 8</span><br><span class="line">AND (place&#x3D;&#39;HC&#39; OR place&#x3D;&#39;CN&#39;);</span><br></pre></td></tr></table></figure><h1 id="5、SQL-ORDER-BY-关键字"><a href="#5、SQL-ORDER-BY-关键字" class="headerlink" title="5、SQL ORDER BY 关键字"></a>5、SQL ORDER BY 关键字</h1><p>ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。<br>ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，可以使用 DESC 关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">SELECT 列名</span><br><span class="line">FROM 表名</span><br><span class="line">ORDER BY 列名 ASC|DESC;</span><br></pre></td></tr></table></figure><p>ORDER BY 多列时：<br>order by A,B        这个时候都是默认按升序排列<br>order by A desc,B   这个时候 A 降序，B 升序排列<br>order by A ,B desc  这个时候 A 升序，B 降序排列<br><code>即 desc 或者 asc 只对它紧跟着的第一个列名有效，其他不受影响，仍然是默认的升序。</code></p><h1 id="6、SQL-INSERT-INTO-语句"><a href="#6、SQL-INSERT-INTO-语句" class="headerlink" title="6、SQL INSERT INTO 语句"></a>6、SQL INSERT INTO 语句</h1><p>INSERT INTO 语句用于向表中插入新记录。<br>INSERT INTO 语句可以有两种编写形式。</p><ul><li>第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名</span><br><span class="line">VALUES (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><ul><li>第二种形式需要指定列名及被插入的值：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名 (列名1,列名2,...)</span><br><span class="line">VALUES (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><p><code>insert into select 和 select into from 的区别</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into scorebak select * from socre where neza&#x3D;&#39;neza&#39;   插入一行，要求表scorebak 必须存在</span><br><span class="line">select *  into scorebak from score  where neza&#x3D;&#39;neza&#39;  插入一行，要求表scorebak 不存在</span><br></pre></td></tr></table></figure><h1 id="7、SQL-UPDATE-语句"><a href="#7、SQL-UPDATE-语句" class="headerlink" title="7、SQL UPDATE 语句"></a>7、SQL UPDATE 语句</h1><p>UPDATE 语句用于更新表中已存在的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">UPDATE 表名</span><br><span class="line">SET 列名1&#x3D;value1,列名2&#x3D;value2,...</span><br><span class="line">WHERE 列名&#x3D;value;</span><br></pre></td></tr></table></figure><p><code>慎重执行没有 WHERE 子句的 UPDATE</code><br>在 MySQL 中可以通过设置 sql_safe_updates 这个自带的参数来解决，当该参数开启的情况下，你必须在update 语句后携带 where 条件，否则就会报错。<br>set sql_safe_updates=1; 表示开启该参数</p><h1 id="8、SQL-DELETE-语句"><a href="#8、SQL-DELETE-语句" class="headerlink" title="8、SQL DELETE 语句"></a>8、SQL DELETE 语句</h1><p>DELETE 语句用于删除表中的行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">DELETE FROM 表名</span><br><span class="line">WHERE 列名&#x3D;value;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">DELETE FROM test</span><br><span class="line">WHERE name&#x3D;&#39;百度&#39; AND place&#x3D;&#39;SH&#39;;</span><br></pre></td></tr></table></figure><ul><li>删除所有数据<br>可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名; 或 DELETE * FROM 表名;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SQL关于删除的三个语句：DROP、TRUNCATE、 DELETE 的区别。</span><br><span class="line">相同点：drop、delete、truncate 都是删除表的内容。</span><br><span class="line">不同点：</span><br><span class="line"> delete：删除表的内容，表的结构还存在，不释放空间，可以回滚恢复；</span><br><span class="line"> drop：删除表内容和结构，释放空间，没有备份表之前要慎用；</span><br><span class="line"> truncate：删除表的内容，表的结构存在，可以释放空间,没有备份表之前要慎用；</span><br><span class="line">执行速度：</span><br><span class="line">drop &gt; truncate &gt; delete</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、SQL-SELECT-语句&quot;&gt;&lt;a href=&quot;#1、SQL-SELECT-语句&quot; class=&quot;headerlink&quot; title=&quot;1、SQL SELECT 语句&quot;&gt;&lt;/a&gt;1、SQL SELECT 语句&lt;/h1&gt;&lt;p&gt;SELECT 语句用于从数据库中选取数据，结果被存储在一个结果表中。&lt;br&gt;语法：&lt;code&gt;SELECT 列名称 FROM 表名;&lt;/code&gt;与&lt;code&gt;与SELECT * FROM 表名;&lt;/code&gt;
    
    </summary>
    
    
    
      <category term="SQL数据库" scheme="http://yoursite.com/tags/SQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>计算机硬件系统</title>
    <link href="http://yoursite.com/2020/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2020/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-03-16T16:00:00.000Z</published>
    <updated>2020-04-25T08:56:24.870Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1．计算机硬件系统"><a href="#1．计算机硬件系统" class="headerlink" title="1．计算机硬件系统"></a>1．计算机硬件系统</h5><p>硬件系统是构成计算机系统各个功能部件的物理实体，是计算机能够工作的物质基础。根据冯·诺依曼提出的计算机设计思想，计算机的硬件结构主要由控制器、运算器、存储器、输入设备和输出设备五个部分组成。</p><a id="more"></a><p><strong>1.1    控制器</strong><br>控制器是计算机系统的神经中枢和指挥中心，用于控制、指挥计算机系统的各个部分协调工作。其<code>基本功能</code>是从内存中取出指令，对指令进行分析，然后根<br>据该指令的功能向有关部件发出控制命令，以完成该指令所规定的任务。<br>控制器主要由<code>程序计数器、指令寄存器、指令译码器、操作控制电路和时序控制电路等</code>组成，<br>主要功能是：<br>⑴ 程序计数器（PC）：用来对程序中的指令进行计数，使控制器能够按照一定的顺序依次读取指令。<br>⑵ 指令寄存器（IR）：保存从内存中读取出来的指令。<br>⑶ 指令译码器（IE）：用于识别、分析指令的功能，确定指令的操作要求。<br>⑷ 操作控制电路：根据指令译码，产生各种控制操作命令。<br>⑸ 时序控制电路：生成脉冲时序信号，以协调、控制计算机各部件的工作。<br><strong>1.2    运算器</strong><br>运算器（ALU）是对信息进行加工处理的部件，主要由<code>算术逻辑运算器、累加器、寄存器</code>等组成。运算器的功能是在控制器的控制下，对取自内存或者寄存器的二进制数据进行各种加工处理，包括加、减、乘、除等算术运算和与、或、非、比较等逻辑运算后，再将运算结果暂存在寄存器或送到内存中保存。<br><code>控制器和运算器组成中央处理单元 CPU。</code><br><strong>1.3    存储器</strong><br>存储器是具有记忆能力的电子装置或机电设备。使用时，可以从存储器中<br>取出数据并且不影响原有数据；也可以将数据保存到存储器中而替换原有内容，此种操作称为写入操作。存储器通常分为内存储器和外存储器两大类。<br>(1) 内存储器<br>内存储器又称主存储器，其主要功能是存放 CPU 要执行的程序、要处理的原始数据、处理后的中间结果和最终结果。<br>内存储器的特点是工作速度快、容量较小、价格较高。<br>内存储器可分为三类：<br>① 只读存储器（ROM）<br>ROM 中的数据在制作时或者安装前已经写入并固定在里面，只能读出，一般不能改变（写入），断电也不会丢失。通常用于存放不需要经常改变的程序或数据。<br>② 随机存取存储器（RAM）<br>RAM 中的数据可以根据需要随意地写入或读出，但只要一断电，其中保存的所有数据就会丢失，主要用于存放要执行的程序和需要加工处理的数据。<br>③ 高速缓冲存储器（Cache）<br>Cache 是介于 CPU 和内存之间的一种可以高速存取信息的存储器芯片，是 CPU 和内存之间交换信息的桥梁，用于解决 CPU 和内存之间工作速度的冲突问题，以提高整个系统的工作效率。<br><code>CPU 和内存储器构成计算机的主机。</code><br>(2) 外存储器<br>外存储器又称辅助存储器，是内存储器的补充和后援，主要用于存放计算机当前不处理的程序和大量的数据。保存在外存储器中的程序和数据只在需要时，才会调入到内存中。外存储器不与计算机系统的其它部件直接交换数据，只和内存交换数据，并且不是按单个数据进行存取，而是成批地进行数据交换。外存储器容量大，保存的程序和数据在断电后也不会丢失，弥补了内存储器 RAM 的容量小，断电会丢失数据的缺陷。常用的外存储器主要有<code>软／硬磁盘、光盘、磁带、闪存盘</code>等。<br>外存储器的特点是容量很大，信息可长期保存，但数据的读／写速度较慢。<br><strong>1.4    输入设备</strong><br>输入设备是向内存输入程序、数据等各种信息的设备。其功能是将要输入的程序和数据转换成相应的电信号，让计算机能够接受，如键盘、鼠标、扫描仪等。<br><strong>1.5    输出设备</strong><br>输出设备是将计算机的处理结果从内存中输出，并以用户能够接受的形式表示出来的设备，如显示器、打印机、绘图仪等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1．计算机硬件系统&quot;&gt;&lt;a href=&quot;#1．计算机硬件系统&quot; class=&quot;headerlink&quot; title=&quot;1．计算机硬件系统&quot;&gt;&lt;/a&gt;1．计算机硬件系统&lt;/h5&gt;&lt;p&gt;硬件系统是构成计算机系统各个功能部件的物理实体，是计算机能够工作的物质基础。根据冯·诺依曼提出的计算机设计思想，计算机的硬件结构主要由控制器、运算器、存储器、输入设备和输出设备五个部分组成。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>计算机软件系统</title>
    <link href="http://yoursite.com/2020/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2020/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-03-16T16:00:00.000Z</published>
    <updated>2020-04-25T08:56:18.114Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1．计算机软件系统"><a href="#1．计算机软件系统" class="headerlink" title="1．计算机软件系统"></a>1．计算机软件系统</h5><p>计算机的硬件系统只有与软件系统密切配合，才能够正常工作和使用。计算机软件指的是操作、运行、管理、维护计算机所需的各种应用程序及其相关的数据和技术文档资料。其作用是为方便用户使用计算机，充分而有效地发挥计算机的功能。软件系统的好坏会直接地影响计算机的应用。通常将软件分为两大类：系统软件和应用软件。</p><a id="more"></a><p><strong>1.1    系统软件</strong><br>系统软件指的是管理、监控、维护计算机的软、硬件资源，使计算机系统能够高效率工作的一组程序及文档资料。它由计算机软件生产厂商研制提供，主要包括操作系统、各种语言处理系统、数据库管理系统、服务性程序等。<br>(1)操作系统<br>操作系统是管理、控制计算机系统的所有软、硬件资源，提供用户与计算机交流信息的界面，方便用户操作、使用计算机系统的各种资源和功能，以最大限度地发挥计算机的作用和效能的一组庞大的管理控制程序。<br> (2)语言处理系统<br>要使计算机按照用户的要求去工作，必须使计算机能够接受，并懂得用户输送给它的各种命令和数据，而且还应当能够将运算处理后的结果反馈给用户。用户与计算机之间的这种信息交流同样需要语言。语言处理系统（通常称为程序设计语言）就是用户与计算机交流信息的语言工具，提供了让用户按自己的需要编制程序的功能。<br>① 机器语言<br>机器语言是计算机系统能够识别，能直接接收并执行的程序设计语言。机器语言中的每一条语句就是一条由若干位二进制数构成的指令代码或数据代码。<br>② 汇编语言<br>汇编语言也是一种面向机器的程序设计语言，是一种把机器语言符号化的语言。它采用一些有意义的缩写字母及符号来表示机器语言中的指令和数据。<br>③ 高级语言<br>高级语言是面向解题过程或者面向对象的语言。它采用命令关键字及表达式等，按照一定的语法规则编写程序。它们的语句比较接近人类使用的自然语言和数学表达式，数据用十进制表示。用高级语言编写的程序易读、易记、易维护，且通用性强，便于推广和交流，从而大大提高了程序设计效率。<br>(3) 数据库管理系统<br>数据库管理系统向用户提供按照一定的结构组织、管理、加工、处理各类数据的能力，如 Access、Oracle、SQL Server、等。<br>(4) 服务程序<br>用于调试、检测、诊断、维护计算机软、硬件的程序，如连接程序 Link，编辑程序 Editor，诊断测试程序 Qaplus 等。</p><h5 id="2．应用软件"><a href="#2．应用软件" class="headerlink" title="2．应用软件"></a>2．应用软件</h5><p>应用软件是在系统软件的支持下，针对某种专门的应用目的设计编制的程序及相关文档。如各种字处理软件 Word、WPS、WordStar；电子表格软件 Excel；图像处理软件 PhotoShop、AutoCAD；媒体播放软件 ReaPlayer、Windows Media Player；各种会计、财务、金融、人事、档案、图书、学籍、销售等管理信息系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1．计算机软件系统&quot;&gt;&lt;a href=&quot;#1．计算机软件系统&quot; class=&quot;headerlink&quot; title=&quot;1．计算机软件系统&quot;&gt;&lt;/a&gt;1．计算机软件系统&lt;/h5&gt;&lt;p&gt;计算机的硬件系统只有与软件系统密切配合，才能够正常工作和使用。计算机软件指的是操作、运行、管理、维护计算机所需的各种应用程序及其相关的数据和技术文档资料。其作用是为方便用户使用计算机，充分而有效地发挥计算机的功能。软件系统的好坏会直接地影响计算机的应用。通常将软件分为两大类：系统软件和应用软件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>软件测试理论基础</title>
    <link href="http://yoursite.com/2020/03/16/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/03/16/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-15T16:00:00.000Z</published>
    <updated>2020-03-22T02:03:26.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、软件测试概念"><a href="#一、软件测试概念" class="headerlink" title="一、软件测试概念"></a>一、软件测试概念</h1><p> 通过手工或工具对“被测对象”进行测试操作，从而验证实际与预期结果之间是否存在差异。<a id="more"></a> </p><h1 id="二、软件测试原则"><a href="#二、软件测试原则" class="headerlink" title="二、软件测试原则"></a>二、软件测试原则</h1><p>1、测试证明软件存在缺陷。<br>2、不能执行穷尽测试。<br>3、缺陷存在群集现象，对于软件功能来说，核心功能占20%，非核心是80%，集中测试20%的核心功能发现缺陷的几率高。<br>4、某些测试需要依赖特殊的环境。<br>5、尽可能早的开展测试。<br>6、杀虫剂现象：同样的一个测试用例不能重复的执行多次。<br>7、不存在缺陷谬论。</p><h1 id="三、测试级别"><a href="#三、测试级别" class="headerlink" title="三、测试级别"></a>三、测试级别</h1><p>软件开发都会依据相应的开发模型，测试级别指的就是在这个模型当中我们认为定义的开发步骤。<br>1、单元测试：指的是组成软件最小的底层代码结构，一般都是类、函数、组件等。<br>2、集成测试（接口测试）：将多个单元模块组合在一起，验证它们之间沟通的桥梁是否能正常工作。<br>3、系统测试：由测试人员充当用户然后对软件的功能主体进行测试。</p><h1 id="四、系统测试分类"><a href="#四、系统测试分类" class="headerlink" title="四、系统测试分类"></a>四、系统测试分类</h1><p>1、功能测试：验证当前软件主体功能是否可用。<br>2、兼容性测试：验证当前软件在不同的环境下是否还可以使用。<br>3、安全性测试：验证软件是否只是能授权用户提供功能使用。<br>4、性能测试：相对于当前软件消耗的资源，它的产出能力。</p><h1 id="五、软件测试流程"><a href="#五、软件测试流程" class="headerlink" title="五、软件测试流程"></a>五、软件测试流程</h1><p>1、需求分析</p><ul><li>核心目的：弄清楚要测啥。</li><li>需求来源：需求规格说明书、API文档、同行竞品分析等。</li></ul><p>2、设计用例  </p><ul><li>用例就是用户为了测试软件的某个功能而执行的操作过程。</li><li>设计用例的方法有：等价类、边界值、因果图等。</li></ul><p>3、评审用例</p><ul><li>对当前的用例进行添加或删除。</li></ul><p>4、配置环境</p><ul><li>环境分类：操作系统、服务器软件、数据库、软件底层代码的执行环境。</li></ul><p>5、执行用例</p><ul><li>执行前先做冒烟测试，其核心是快速的对当前软件的核心功能进行验证。</li></ul><p>6、回归测试及缺陷跟踪</p><ul><li>目的是检验已经被发现的缺陷有没有被正确的修改和修改过程中有没有引发新的缺陷。软件在测试或者其他活动中发现的缺陷经过修改后，都要进行回归测试的验证。</li></ul><p>7、输出测试报告</p><ul><li>将当前的测试过程中产生的数据进行可视化的输出。</li></ul><p>8、测试结束</p><ul><li>把测试过程的文档进行整理。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、软件测试概念&quot;&gt;&lt;a href=&quot;#一、软件测试概念&quot; class=&quot;headerlink&quot; title=&quot;一、软件测试概念&quot;&gt;&lt;/a&gt;一、软件测试概念&lt;/h1&gt;&lt;p&gt; 通过手工或工具对“被测对象”进行测试操作，从而验证实际与预期结果之间是否存在差异。
    
    </summary>
    
    
    
      <category term="软件测试" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>原码、反码和补码</title>
    <link href="http://yoursite.com/2020/03/16/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/"/>
    <id>http://yoursite.com/2020/03/16/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/</id>
    <published>2020-03-15T16:00:00.000Z</published>
    <updated>2020-04-25T08:18:42.985Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1．原码"><a href="#1．原码" class="headerlink" title="1．原码"></a>1．原码</h5><p>原码是用 n 位二进制数的最高位作为符号位，符号位的<code>“0”表示正号，“1”表示负号</code>，其余位表示二进制数的数值。<br><img src="https://img-blog.csdnimg.cn/20200425161259323.png" alt="在这里插入图片描述"><br> n 位原码能够表示的数值范围是：<img src="https://img-blog.csdnimg.cn/20200425161353453.png" alt="在这里插入图片描述"></p><h5 id="2．反码"><a href="#2．反码" class="headerlink" title="2．反码"></a>2．反码</h5><p>当机器数为正数时，其反码与原码相同；当机器数为负数时，符号位保持不变（仍为“1”），其余数值位全部按位取反，得到的就是反码。<br><img src="https://img-blog.csdnimg.cn/20200425161517201.png#pic_center" alt="在这里插入图片描述"></p><h5 id="3．补码"><a href="#3．补码" class="headerlink" title="3．补码"></a>3．补码</h5><p>当机器数为正数时，其补码与原码相同；当机器数为负数时，符号位保持不变（仍为“1”），其余数值位全部按位取反后再加 1，得到的就是补码。<code>负数的补码就等于该数的反码加 1。</code><br><img src="https://img-blog.csdnimg.cn/20200425161632611.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200425161718918.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200425161814383.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200425161826425.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1．原码&quot;&gt;&lt;a href=&quot;#1．原码&quot; class=&quot;headerlink&quot; title=&quot;1．原码&quot;&gt;&lt;/a&gt;1．原码&lt;/h5&gt;&lt;p&gt;原码是用 n 位二进制数的最高位作为符号位，符号位的&lt;code&gt;“0”表示正号，“1”表示负号&lt;/code&gt;，其余位表示二进
      
    
    </summary>
    
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>定点数与浮点数</title>
    <link href="http://yoursite.com/2020/03/16/%E5%AE%9A%E7%82%B9%E6%95%B0%E4%B8%8E%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <id>http://yoursite.com/2020/03/16/%E5%AE%9A%E7%82%B9%E6%95%B0%E4%B8%8E%E6%B5%AE%E7%82%B9%E6%95%B0/</id>
    <published>2020-03-15T16:00:00.000Z</published>
    <updated>2020-04-25T08:10:18.783Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1．定点数"><a href="#1．定点数" class="headerlink" title="1．定点数"></a>1．定点数</h5><p>在机器数中，小数点的位置固定不变的数称为定点数。整数和定点小数都是定点数。</p><a id="more"></a><p>若将小数点的位置固定在机器数最低位之后，此时的机器数表示的就是一个纯整数。<br>带符号定点整数的一般形式如下：<br><img src="https://img-blog.csdnimg.cn/20200425160047377.png#pic_center" alt="在这里插入图片描述"><br>对于 n 位带符号的二进制整数，可表示数值的位数为 n－1 位，其取值范围是：<br><img src="https://img-blog.csdnimg.cn/20200425160526878.png#pic_center" alt="在这里插入图片描述"></p><p>若将小数点的位置固定在符号位之后，数值最高位之前，此时的机器数表示的就是一个纯小数，又称定点小数。定点小数的一般形式如下：<br><img src="https://img-blog.csdnimg.cn/20200425160147880.png" alt="在这里插入图片描述"><br>对于 n 位带符号的二进制定点小数，可表示数值的位数为 n－1 位，其取值范围是：<br><img src="https://img-blog.csdnimg.cn/20200425160509980.png#pic_center" alt="在这里插入图片描述"></p><h5 id="2．浮点数"><a href="#2．浮点数" class="headerlink" title="2．浮点数"></a>2．浮点数</h5><p>小数点的位置在数中是可以变动的，这种数值表示法称为浮点表示法。浮点表示法将任意一个二<br>进制数表示成阶码和尾数两部分。<br>二进制数 N 的浮点表示法的一般形式为：<br><img src="https://img-blog.csdnimg.cn/20200425160725583.png" alt="在这里插入图片描述"><br>其中：E—是 N 的阶码 (指数)，E 前的正负号称为阶符；M—是 N 的尾数，为数值的有效数字部分，M 前的正负号称为数符；2是二进制数的基数。<br>浮点数的一般表示形式如下：<br><img src="https://img-blog.csdnimg.cn/2020042516083199.png#pic_center" alt="在这里插入图片描述"><br>尾数总是一个小于 1的数。数符占一位，用于确定该浮点数的正负。阶码总为整数，用于确定小数点浮动的位数。阶符也占一位，用于确定小数点浮动的方向。若阶符为正，小数点向左浮动；若阶符为负，小数点则向右浮动。为了保证精度，通常需要对浮点小数进行规格化处理，所谓规格化处理指的是要保证尾数部分的最高位为 1。<br><img src="https://img-blog.csdnimg.cn/20200425160951450.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1．定点数&quot;&gt;&lt;a href=&quot;#1．定点数&quot; class=&quot;headerlink&quot; title=&quot;1．定点数&quot;&gt;&lt;/a&gt;1．定点数&lt;/h5&gt;&lt;p&gt;在机器数中，小数点的位置固定不变的数称为定点数。整数和定点小数都是定点数。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>二进制数的运算</title>
    <link href="http://yoursite.com/2020/03/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2020/03/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-04-25T07:56:07.360Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1．二进制数的算术运算"><a href="#1．二进制数的算术运算" class="headerlink" title="1．二进制数的算术运算"></a>1．二进制数的算术运算</h5><p>二进制数的算术运算与十进制算术运算类似，包括加法、减法、乘法和除法四种运算。</p><a id="more"></a><p><strong>⑴ 加法运算</strong><br>二进制的加法运算遵循以下法则：<br><code>0＋0＝0 ；0＋1＝1；1＋0＝1 ；1＋1＝10（逢二进一）</code>。两个二进制数相加时，每一位最多有三个数相加：本位被加数、加数和来自低位的进位（进位可能是 0，也可能是 1）。按照加法运算法则可以<br>得到本位的和，以及向高位的进位。<br><img src="https://img-blog.csdnimg.cn/20200425154538466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dieHNoaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>⑵ 减法运算<br>二进制的减法运算遵循以下法则：<br><code>0－0＝0 ；0－1＝1 （借一当二）；1－0＝1；1－1＝0</code><br>两个二进制数相减时，每一位最多有三个数相减，<br>本位的被减数、减数和来自高位的借位，借位以 1 当 2。所以减法运算除了本位相减外，还<br>要考虑借位的情况。<br><img src="https://img-blog.csdnimg.cn/20200425154638230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dieHNoaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>⑶ 乘法运算<br>二进制的乘法运算遵循以下法则：<br><code>0×0＝0 ；0×1＝0 ；1×0＝0 ；1×1＝1。</code><br><img src="https://img-blog.csdnimg.cn/20200425154756468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dieHNoaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>各个部分积的值取决于乘数的相应位是0还是1。<br>若乘数的相应位为 0，部分积为 0；若乘数的相应位为 1，则部分积等于被乘数。部分积的个数等与乘数的位数，每个部分积依次向左移动一位，乘积等于各个部分积的累加和。<br>⑷ 除法运算<br>二进制的除法运算遵循以下法则：<br><code>0÷0＝0 ；0÷1＝0 ；1÷0（无意义）；1÷1＝1。</code><br><img src="https://img-blog.csdnimg.cn/20200425154859980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dieHNoaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2．二进制数的逻辑运算"><a href="#2．二进制数的逻辑运算" class="headerlink" title="2．二进制数的逻辑运算"></a>2．二进制数的逻辑运算</h5><p>把二进制数码“0”和“1”表示成“真”和“假”相对立的两种变量值，这种变量称为逻辑变量。描述逻辑变量关系的函数称为逻辑函数。实现逻辑函数的电路称为逻辑电路。实现逻辑变量之间的运算称为逻辑运算。逻辑运算是逻辑代数的研究内容。<br>基本逻辑运算有三个：逻辑与运算、逻辑或运算、逻辑非运算。<br><strong>⑴ 逻辑与运算</strong><br>又称逻辑乘法，常用“· ”或“×”或“And ”表示。逻辑与运算所表示的逻辑运算关系是：只有当所有的条件都为真时，结果才为真；若有一个条件为假，结果就为假。<br>逻辑与运算的运算规则如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>·<span class="number">0</span>＝<span class="number">0</span> ；<span class="number">0</span>·<span class="number">1</span>＝<span class="number">0</span> ；<span class="number">1</span>·<span class="number">0</span>＝<span class="number">0</span> ；<span class="number">1</span>·<span class="number">1</span>＝<span class="number">1</span>。</span><br></pre></td></tr></table></figure><p>当参与运算的逻辑变量值都为 1 时，逻辑与运算的结果才为 1；只要其中有一个逻辑变量为 0，结果就为 0。<br><img src="https://img-blog.csdnimg.cn/20200425155215498.png" alt="在这里插入图片描述"><br><strong>⑵ 逻辑或运算</strong><br>又称逻辑加法，常用“＋”或“Or ”表示。逻辑或运算所表示的逻辑运算关系是：在所有的条件中只要有一个条件为真，结果就为真；只有当所有条件为假时，结果才为假。<br>逻辑或运算的运算规则如下：<code>0＋0＝0； 0＋1＝1 ；1＋0＝1； 1＋1＝1</code><br>当参与运算的逻辑变量值都为 0 时，逻辑或运算的结果才为 0；只要其中有一个逻辑变量为 1，结果就为 1。<br><img src="https://img-blog.csdnimg.cn/20200425155416935.png" alt="在这里插入图片描述"><br><strong>⑶ 逻辑非运算</strong><br>又称逻辑否定或逻辑反，常用在逻辑值或逻辑变量上加一横，或者用“Not”来表示，例如 A 的逻辑非写作 Ā。<br>逻辑非运算所表示的逻辑运算关系是：条件为真时，结果为假；条件为假时，结果为真。<br>逻辑非运算的运算规则如下：<code>ō ＝ 1 ī ＝ 0</code><br><code>当参与运算的逻辑变量值为 0 时，逻辑非运算的结果为 1，而逻辑变量值为 1 时，结果为 0。</code><br>【例1】设 A＝10110110，求 Ā＝？<br>解：Ā＝01001001</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1．二进制数的算术运算&quot;&gt;&lt;a href=&quot;#1．二进制数的算术运算&quot; class=&quot;headerlink&quot; title=&quot;1．二进制数的算术运算&quot;&gt;&lt;/a&gt;1．二进制数的算术运算&lt;/h5&gt;&lt;p&gt;二进制数的算术运算与十进制算术运算类似，包括加法、减法、乘法和除法四种运算。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>进制数间的转换</title>
    <link href="http://yoursite.com/2020/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E8%BF%9B%E5%88%B6%E6%95%B0%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2020/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E8%BF%9B%E5%88%B6%E6%95%B0%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-04-25T07:11:39.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、二进制数和十进制数间的相互转换"><a href="#1、二进制数和十进制数间的相互转换" class="headerlink" title="1、二进制数和十进制数间的相互转换"></a>1、二进制数和十进制数间的相互转换</h3><p><strong>⑴ 十进制数转换成二进制数</strong><br>将十进制数转换成二进制数时，需要对整数部分和小数部分分别进行，然后将各自得到的结果组合，以获得最后结果。</p><a id="more"></a><p><strong>转换步骤如下：</strong><br>① 整数的转换：采用除 2 取余法，得到的余数，其高低位顺序从下往上取；<br>② 小数的转换：采用乘 2 取整法，得到的整数，其高低位顺序从上往下取；<br>③ 将转换获得的整数和小数部分组合起来，即得转换后的二进制数。<br><img src="https://img-blog.csdnimg.cn/20200425150535649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dieHNoaQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>⑵ 二进制数转换为十进制数</strong><br>二进制数转换成十进制数采用按权展开乘幂求和。<br><img src="https://img-blog.csdnimg.cn/20200425150610478.png" alt="在这里插入图片描述"></p><h3 id="2、二进制数和八进制数、十六进制数间的相互转换"><a href="#2、二进制数和八进制数、十六进制数间的相互转换" class="headerlink" title="2、二进制数和八进制数、十六进制数间的相互转换"></a>2、二进制数和八进制数、十六进制数间的相互转换</h3><p>1 位八进制数可以用 3 位二进制数表示，1 位十六进制数可以用 4 位二进制数表示。<br><strong>① 二进制数转换成八进制数</strong><br>以小数点为界，整数部分向左，小数部分向右，每三位一组，用相应的八进制数表示，到左端最高位或右端最低位不足三位时，用 0 补足。<br><strong>② 二进制数转换成十六进制数</strong><br>以小数点为界，整数部分向左，小数部分向右，每四位一组，用相应的十六进制数表示，到左端最高位或右端最低位不足四位时，用 0 补足。<br><img src="https://img-blog.csdnimg.cn/20200425150712746.png#pic_center" alt="在这里插入图片描述"><br><strong>⑵ 八进制数、十六进制数转换成二进制数</strong><br>将每位八进制数或十六进制数分别用相应的三位或四位二进制数表示即可。<br><img src="https://img-blog.csdnimg.cn/20200425150905173.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、二进制数和十进制数间的相互转换&quot;&gt;&lt;a href=&quot;#1、二进制数和十进制数间的相互转换&quot; class=&quot;headerlink&quot; title=&quot;1、二进制数和十进制数间的相互转换&quot;&gt;&lt;/a&gt;1、二进制数和十进制数间的相互转换&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;⑴ 十进制数转换成二进制数&lt;/strong&gt;&lt;br&gt;将十进制数转换成二进制数时，需要对整数部分和小数部分分别进行，然后将各自得到的结果组合，以获得最后结果。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>VBScript函数</title>
    <link href="http://yoursite.com/2020/02/15/VBScript%20%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/02/15/VBScript%20%E5%87%BD%E6%95%B0/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2020-03-22T07:54:18.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String-函数"><a href="#String-函数" class="headerlink" title="String 函数"></a>String 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">InStr返回字符串在另一字符串中首次出现的位置。检索从字符串的第一个字符开始 &lt;!-- more --&gt;</span><br><span class="line"> </span><br><span class="line">InStrRev返回字符串在另一字符串中首次出现的位置。检索从字符串的最末字符开始</span><br><span class="line">LCase把指定字符串转换为小写</span><br><span class="line">Left从字符串的左侧返回指定数目的字符</span><br><span class="line">Len返回字符串中的字符数目</span><br><span class="line">LTrim删除字符串左侧的空格</span><br><span class="line">RTrim删除字符串右侧的空格</span><br><span class="line">Trim删除字符串左侧和右侧的空格</span><br><span class="line">Mid从字符串返回指定数目的字符</span><br><span class="line">Replace使用另外一个字符串替换字符串的指定部分指定的次数</span><br><span class="line">Right返回从字符串右侧开始指定数目的字符</span><br><span class="line">Space返回由指定数目的空格组成的字符串</span><br><span class="line">StrComp比较两个字符串，返回代表比较结果的一个值</span><br><span class="line">String返回包含指定长度的重复字符的字符串</span><br><span class="line">StrReverse反转字符串</span><br><span class="line">UCase把指定的字符串转换为大写</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Date-和-Time-函数"><a href="#Date-和-Time-函数" class="headerlink" title="Date 和 Time 函数"></a>Date 和 Time 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CDate       把一个有效的日期或时间表达式转换为日期类型</span><br><span class="line">Date       返回当前的系统日期</span><br><span class="line">DateAdd       返回已添加指定时间间隔的日期</span><br><span class="line">DateDiff       返回两个日期之间的时间间隔数</span><br><span class="line">DatePart       返回给定日期的指定部分</span><br><span class="line">DateSerial     返回日期的指定年、月、日</span><br><span class="line">DateValue      返回日期</span><br><span class="line">Day           返回代表一月中一天的数字</span><br><span class="line">FormatDateTime 返回以日期或时间格式化的表达式</span><br><span class="line">Hour       返回可代表一天中的小时的数字 </span><br><span class="line">IsDate       返回可指示计算表达式能否转换为日期的布尔值</span><br><span class="line">Minute       返回一个数字，代表小时的分钟 </span><br><span class="line">Month       返回一个数字，代表年的月份</span><br><span class="line">MonthName   返回指定月份的名称</span><br><span class="line">Now           返回当前的系统日期和时间</span><br><span class="line">Second       返回一个数字，代表分钟的秒</span><br><span class="line">Time       返回当前的系统时间</span><br><span class="line">Timer       返回自 12:00 AM 以来的秒数</span><br><span class="line">TimeSerial   返回特定小时、分钟和秒的时间</span><br><span class="line">TimeValue   返回时间</span><br><span class="line">Weekday       返回一个数字，代表星期的一天</span><br><span class="line">WeekdayName   返回星期中指定的一天的星期名</span><br><span class="line">Year       返回一个代表年份的数字</span><br></pre></td></tr></table></figure><h3 id="Format-函数"><a href="#Format-函数" class="headerlink" title="Format 函数"></a>Format 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FormatCurrency返回作为货币值进行格式化的表达式</span><br><span class="line">FormatDateTime返回作为日期或时间进行格式化的表达式</span><br><span class="line">FormatNumber返回作为数字进行格式化的表达式</span><br><span class="line">FormatPercent返回作为百分数进行格式化的表达式</span><br></pre></td></tr></table></figure><h3 id="Conversion-函数"><a href="#Conversion-函数" class="headerlink" title="Conversion 函数"></a>Conversion 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Asc           把字符串中的首字母转换为 ANSI 字符代码</span><br><span class="line">CBool       把表达式转换为布尔类型</span><br><span class="line">CByte        把表达式转换为 Byte 类型</span><br><span class="line">CCur       把表达式转换为货币（Currency）类型</span><br><span class="line">CDate       把有效的日期和时间表达式转换为 Date 类型</span><br><span class="line">CDbl       把表达式转换为 Double 类型</span><br><span class="line">Chr           把指定的 ANSI 字符代码转换为字符</span><br><span class="line">CInt       把表达式转换为 Int 类型</span><br><span class="line">CLng       把表达式转换为 Long 类型</span><br><span class="line">CSng       把表达式转换为 Single 类型</span><br><span class="line">CStr       把表达式转换为子类型 String 的 variant </span><br><span class="line">Hex           返回指定数字的十六进制值</span><br><span class="line">Oct           返回指定数字的八进制值</span><br></pre></td></tr></table></figure><h3 id="Array-函数"><a href="#Array-函数" class="headerlink" title="Array 函数"></a>Array 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Array返回一个包含数组的变量</span><br><span class="line">Filter返回下标从零开始的数组，其中包含基于特定过滤条件的字符串数组的子集</span><br><span class="line">IsArray返回一个布尔值，可指示指定的变量是否是数组</span><br><span class="line">Join返回一个由数组中若干子字符串组成的字符串</span><br><span class="line">LBound返回指定数组维数的最小下标</span><br><span class="line">Split返回下标从0开始的一维数组，包含指定数目的子字符串</span><br><span class="line">UBound返回指定数组维数的最大下标</span><br></pre></td></tr></table></figure><h3 id="Math-函数"><a href="#Math-函数" class="headerlink" title="Math 函数"></a>Math 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Abs            返回指定数字的绝对值</span><br><span class="line">Atn            返回指定数字的反正切</span><br><span class="line">Cos            返回指定数字或角度的余弦</span><br><span class="line">Exp返回 e的幂次方</span><br><span class="line">Hex返回指定数字的十六进制值</span><br><span class="line">Int返回指定数字的整数部分</span><br><span class="line">Fix返回指定数字的整数部分</span><br><span class="line">Log返回指定数字的自然对数</span><br><span class="line">Oct返回指定数字的余弦值</span><br><span class="line">Rnd返回小于1但大于或等于0的一个随机数</span><br><span class="line">Sgn返回可指示指定的数字的符号的一个整数</span><br><span class="line">Sin返回指定数字或角度的正弦</span><br><span class="line">Sqr返回指定数字的平方根</span><br><span class="line">Tan返回指定数字或角度的正切</span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CreateObject创建指定类型对象。</span><br><span class="line">Eval计算表达式，并返回结果。</span><br><span class="line">GetLocale返回当前区域设置 ID 值。</span><br><span class="line">GetObject返回对文件中 automation 对象的引用。</span><br><span class="line">GetRef允许把 VBScript 子程序连接到页面上的一个 DHTML 事件。</span><br><span class="line">InputBox可显示对话框，用户可在其中输入文本，并&#x2F;或点击按钮，然后返回结果。</span><br><span class="line">IsEmpty返回一个布尔值，指示指定的变量是否已被初始化。</span><br><span class="line">IsNull返回一个布尔值，指示指定的变量是否包含无效数据 (Null)。</span><br><span class="line">IsNumeric返回一个布尔值，指示指定的表达式是否可作为数字来计算。</span><br><span class="line">IsObject返回一个布尔值，指示指定的表达式是否是一个 automation 对象。</span><br><span class="line">LoadPicture返回一个图片对象。仅用于32位平台。</span><br><span class="line">MsgBox显示消息框，等待用户点击按钮，并返回指示用户点击了哪个按钮的值。</span><br><span class="line">RGB返回一个表示 RGB 颜色值的数字。</span><br><span class="line">Round对数进行四舍五入。</span><br><span class="line">ScriptEngine返回使用中的脚本语言。</span><br><span class="line">ScriptEngineBuildVersion返回使用中的脚本引擎版本号。</span><br><span class="line">ScriptEngineMajorVersion返回使用中的脚本引擎的主版本号。</span><br><span class="line">ScriptEngineMinorVersion返回使用中的脚本引擎的次版本号。</span><br><span class="line">SetLocale设置地区 ID ，并返回之前的地区 ID。</span><br><span class="line">TypeName返回指定变量的子类型。</span><br><span class="line">VarType返回指示变量子类型的值。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;String-函数&quot;&gt;&lt;a href=&quot;#String-函数&quot; class=&quot;headerlink&quot; title=&quot;String 函数&quot;&gt;&lt;/a&gt;String 函数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;InStr			返回字符串在另一字符串中首次出现的位置。检索从字符串的第一个字符开始 &amp;lt;!-- more --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;InStrRev		返回字符串在另一字符串中首次出现的位置。检索从字符串的最末字符开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LCase			把指定字符串转换为小写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Left			从字符串的左侧返回指定数目的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Len				返回字符串中的字符数目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LTrim			删除字符串左侧的空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RTrim			删除字符串右侧的空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Trim			删除字符串左侧和右侧的空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mid				从字符串返回指定数目的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Replace			使用另外一个字符串替换字符串的指定部分指定的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Right			返回从字符串右侧开始指定数目的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Space			返回由指定数目的空格组成的字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StrComp			比较两个字符串，返回代表比较结果的一个值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String			返回包含指定长度的重复字符的字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StrReverse		反转字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UCase			把指定的字符串转换为大写&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>常见Linux目录名称</title>
    <link href="http://yoursite.com/2020/02/13/%E5%B8%B8%E8%A7%81%E7%9A%84%20Linux%20%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0/"/>
    <id>http://yoursite.com/2020/02/13/%E5%B8%B8%E8%A7%81%E7%9A%84%20Linux%20%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0/</id>
    <published>2020-02-12T16:00:00.000Z</published>
    <updated>2020-03-28T08:03:49.211Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>目 录</th><th>用 途</th></tr></thead><tbody><tr><td>/</td><td>虚拟目录的根目录。</td></tr><tr><td>/bin</td><td>二进制目录，存放许多用户级的GNU工具</td></tr><tr><td>/boot</td><td>启动目录，存放启动文件</td></tr><tr><td>/dev</td><td>设备目录，Linux在这里创建设备节点</td></tr><tr><td>/etc</td><td>系统配置文件目录</td></tr><tr><td>/home</td><td>主目录</td></tr><tr><td>/lib</td><td>库目录，存放系统和应用程序的库文件</td></tr><tr><td>/mnt</td><td>挂载目录，另一个可移动媒体设备的常用挂载点</td></tr><tr><td>/opt</td><td>可选目录，常用于存放第三方软件包和数据文件</td></tr><tr><td>/root</td><td>root用户的主目录</td></tr><tr><td>/tmp</td><td>临时目录，可以在该目录中创建和删除临时工作文件</td></tr><tr><td>/usr</td><td>用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里</td></tr><tr><td>/var</td><td>可变目录，用以存放经常变化的文件，比如日志文件</td></tr><tr><td>/proc</td><td>进程目录，存放现有硬件及当前进程的相关信息</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目 录&lt;/th&gt;
&lt;th&gt;用 途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;虚拟目录的根目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/bin&lt;/td&gt;
&lt;td&gt;二进制目录，存
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>文件安全与权限</title>
    <link href="http://yoursite.com/2020/02/13/%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8%E4%B8%8E%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2020/02/13/%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8%E4%B8%8E%E6%9D%83%E9%99%90/</id>
    <published>2020-02-12T16:00:00.000Z</published>
    <updated>2020-03-29T01:50:41.380Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-文件类型"><a href="#1-文件类型" class="headerlink" title="1. 文件类型"></a>1. 文件类型</h5><ul><li>d 目录。</li><li>l 符号链接(指向另一个文件)。</li><li>s 套接字文件。</li><li>b 块设备文件。</li><li>c 字符设备文件。</li><li>p 命名管道文件。</li><li>f 普通文件。<a id="more"></a><h5 id="2-文件权限"><a href="#2-文件权限" class="headerlink" title="2. 文件权限"></a>2. 文件权限</h5>例子：<br><code>- r w x r- x r- x</code>：这是该文件的权限位。如果除去最前面的横杠，这里一共是 9个字符，他们分别对应9个权限位。通过这些权限位，可以设定用户对文件的访问权限。这 9个字符可以分为三组：<br>r w x：<code>文件属主权限</code> （这是前面三位）<br>r- x：<code>同组用户权限</code> （这是中间三位）<br>r- x：<code>其他用户权限</code> （这是最后三位）<br>使用touch命令创建一个文件：<code>$ touch mytest</code><br>该目录使用<code>ls -l</code>命令：<br><img src="https://img-blog.csdnimg.cn/20200329094021904.png#pic_center" alt="在这里插入图片描述"></li><li>1 为该文件硬链接的数目。</li><li>Adminnistrator为文件的属主。</li><li>197121是用字节来表示的文件长度，不是 K字节。</li><li>Oct 29 09:38 为 文件的更新时间。</li><li>mytest 为文件名。</li></ul><h5 id="3-修改文件权限位"><a href="#3-修改文件权限位" class="headerlink" title="3. 修改文件权限位"></a>3. 修改文件权限位</h5><p><code>chmod</code> 命令的格式为：<code>chmod [who] operator [permission] filename</code></p><ul><li>who的含义是：u 文件属主权限。g 同组用户权限。o 其他用户权限。a 所有用户(文件属主、同组用户及其他用户)。</li><li>operator的含义：+ 增加权限。- 取消权限。= 设定权限。</li><li>permission的含义：r 读权限。w 写权限。x 执行权限。s 文件属主和组set-ID。t 粘性位*。l 给文件加锁，使其他用户无法访问。u，g，o 针对文件属主、同组用户及其他用户的操作。<br>如果在一个<code>目录</code>上出现“t”位，意味着该目录中的文件只有其属主才可以删除。如果在<code>文件列表</code>时看到“ t”，意味着该脚本或程序在执行时会被放在交换区 (虚<br>存)。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-文件类型&quot;&gt;&lt;a href=&quot;#1-文件类型&quot; class=&quot;headerlink&quot; title=&quot;1. 文件类型&quot;&gt;&lt;/a&gt;1. 文件类型&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;d 目录。&lt;/li&gt;
&lt;li&gt;l 符号链接(指向另一个文件)。&lt;/li&gt;
&lt;li&gt;s 套接字文件。&lt;/li&gt;
&lt;li&gt;b 块设备文件。&lt;/li&gt;
&lt;li&gt;c 字符设备文件。&lt;/li&gt;
&lt;li&gt;p 命名管道文件。&lt;/li&gt;
&lt;li&gt;f 普通文件。
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>vim编辑器</title>
    <link href="http://yoursite.com/2020/02/12/vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://yoursite.com/2020/02/12/vim%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2020-02-11T16:00:00.000Z</published>
    <updated>2020-03-28T07:57:24.327Z</updated>
    
    <content type="html"><![CDATA[<h5 id="vim-基础"><a href="#vim-基础" class="headerlink" title="vim 基础"></a>vim 基础</h5><p>vim编辑器在内存缓冲区中处理数据。只要输入 vim 命令或 vi 和要编辑的文件的名字就可以启动vim编辑器。如：<code>$ vim mytest.c</code>。如果启动vim时未指定文件名，或文件不存在，vim会开辟一段新的缓冲区域来编辑。<br>vim编辑器的两种操作模式：</p><ul><li>普通模式</li><li>插入模式<br>刚打开要编辑的文件或新建一个文件，vim编辑器进入的是普通模式。在普通模式<br>中，vim编辑器会将按键解释成命令。<br>在插入模式下，vim会将你在当前光标位置输入的每个键都插入到缓冲区。按<code>i</code>键就可以进入插入模式，按ESC键退出插入模式回到普通模式。<br>vim中用来移动光标的命令：</li><li>h ：左移一个字符。</li><li>j ：下移一行。</li><li>k ：上移一行。</li><li>l ：右移一个字符。</li></ul><p> vim编辑器的命令行模式提供了一个交互式命令行，可以输入额外的命令来控制vim的行为。在普通模式下按下<code>冒号键</code>进入命令行模式。光标会移动到消息行，然后出现冒号，等待输入命令。在命令行模式下有几个命令可以将缓冲区的数据保存到文件中并退出vim。</p><ul><li>q ：如果未修改缓冲区数据，退出。</li><li>q! ：取消所有对缓冲区数据的修改并退出。</li><li>w filename ：将文件保存到另一个文件中。</li><li>wq ：将缓冲区数据保存到文件中并退出</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;vim-基础&quot;&gt;&lt;a href=&quot;#vim-基础&quot; class=&quot;headerlink&quot; title=&quot;vim 基础&quot;&gt;&lt;/a&gt;vim 基础&lt;/h5&gt;&lt;p&gt;vim编辑器在内存缓冲区中处理数据。只要输入 vim 命令或 vi 和要编辑的文件的名字就可以启动vim编辑
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>shell命令</title>
    <link href="http://yoursite.com/2020/02/11/shell%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/02/11/shell%E5%91%BD%E4%BB%A4/</id>
    <published>2020-02-10T16:00:00.000Z</published>
    <updated>2020-03-28T01:14:57.151Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基本-shell命令"><a href="#基本-shell命令" class="headerlink" title="基本 shell命令"></a>基本 shell命令</h5><p><strong>pwd 命令</strong>显示出shell会话的当前工作目录。</p><p> <strong>cd命令</strong>切换目录。</p><p><strong>ls 命令</strong>显示当前目录下的文件和目录。<code>-a 参数把隐藏文件和普通文件及目录一起显示出来，-R 参数显示当前目录下的内容， -l 参数会产生长列表格式的输出。</code></p><p><strong>touch 命令</strong>创建一个空文件。</p><p> <strong>cp 命令</strong>复制文件。 <code>-R 参数可以在一条命令中递归地复制整个目录的内容。</code></p><p><strong>mv 命令</strong>将文件和目录移动到另一个位置或重新命名。 <code>-i参数，在命令试图覆盖已有的文件时，可以得到提示信息。</code></p><p> <strong>rm命令</strong>删除文件。<code>要删除很多文件且不受提示符的打扰， -f 参数强制删除。</code></p><p> <strong>mkdir 命令</strong>创建目录。 <code>-p 参数可以根据需要创建缺失的父目录。</code></p><p> <strong>rmdir 命令</strong>删除目录。默认情况下， rmdir 命令只删除空目录。可以在整个非空目录上使用 rm 命令。使用 -r 选项使得命令可以向下进入目录，删除其中的文件，然后再删除目录本身。<br> <a id="more"></a><br> <strong>cat 命令</strong>显示文本文件。主要缺陷是一旦运行，就无法控制后面的操作。</p><p>  <strong>more 命令</strong>显示文本文件的内容，在显示每页数据之后停下。</p><p>  <strong>tail 命令</strong>显示文件最后几行的内容。<code>使用 -n 参数+数字来修改所显示的行数。</code></p><p>  <strong>head 命令</strong>显示文件开头那些行的内容。</p><p>  <strong>kill 命令</strong>通过进程PID来结束进程。</p><p>  <strong>killall 命令</strong>通过进程名来结束进程。</p><p>  <strong>df 命令</strong>查看所有已挂载磁盘的使用情况。 </p><p>   <strong>du 命令</strong>显示某个特定目录的磁盘使用情况。默认情况下是当前目录。 -c ：显示所有已列出文件总的大小。-h ：按用户易读的格式输出大小，即用K替代千字节，用M替代兆字节，用G替代吉字节。 -s ：显示每个输出参数的总计。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;基本-shell命令&quot;&gt;&lt;a href=&quot;#基本-shell命令&quot; class=&quot;headerlink&quot; title=&quot;基本 shell命令&quot;&gt;&lt;/a&gt;基本 shell命令&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;pwd 命令&lt;/strong&gt;显示出shell会话的当前工作目录。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;cd命令&lt;/strong&gt;切换目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ls 命令&lt;/strong&gt;显示当前目录下的文件和目录。&lt;code&gt;-a 参数把隐藏文件和普通文件及目录一起显示出来，-R 参数显示当前目录下的内容， -l 参数会产生长列表格式的输出。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;touch 命令&lt;/strong&gt;创建一个空文件。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;cp 命令&lt;/strong&gt;复制文件。 &lt;code&gt;-R 参数可以在一条命令中递归地复制整个目录的内容。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mv 命令&lt;/strong&gt;将文件和目录移动到另一个位置或重新命名。 &lt;code&gt;-i参数，在命令试图覆盖已有的文件时，可以得到提示信息。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;rm命令&lt;/strong&gt;删除文件。&lt;code&gt;要删除很多文件且不受提示符的打扰， -f 参数强制删除。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;mkdir 命令&lt;/strong&gt;创建目录。 &lt;code&gt;-p 参数可以根据需要创建缺失的父目录。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;rmdir 命令&lt;/strong&gt;删除目录。默认情况下， rmdir 命令只删除空目录。可以在整个非空目录上使用 rm 命令。使用 -r 选项使得命令可以向下进入目录，删除其中的文件，然后再删除目录本身。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 内核功能</title>
    <link href="http://yoursite.com/2020/02/11/Linux%20%E5%86%85%E6%A0%B8%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2020/02/11/Linux%20%E5%86%85%E6%A0%B8%E5%8A%9F%E8%83%BD/</id>
    <published>2020-02-10T16:00:00.000Z</published>
    <updated>2020-03-28T00:46:15.237Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-Linux-内核功能"><a href="#1-Linux-内核功能" class="headerlink" title="1. Linux 内核功能"></a>1. Linux 内核功能</h5><p><strong>1. 系统内存管理</strong></p><p>Linux内核的主要功能之一是系统内存管理。内核不仅管理服务器上的可用<code>物理内存</code>，还可以<code>创建和管理虚拟内存</code>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为<code>交换空间</code>。<a id="more"></a><br>内存存储单元按组划分成很多块，这些块称作<code>页面</code>。内核将每个内存页面放在物理内存或交换空间。然后，内核会维护一个内存页面表，指明哪些页面位于物理内存内，哪些页面被换到了磁盘上。<br>内核会记录哪些内存页面正在使用中，并自动把一段时间未访问的内存页面复制到交换空间区域（称为<code>换出</code>）——即使还有可用内存。当程序要访问一个已被换出的内存页面时，内核必须从物理内存换出另外一个内存页面给它让出空间，然后从交换空间换入请求的内存页面。只要Linux系统在运行，为运行中的程序换出内存页面的过程就不会停。 </p><p><strong>2. 软件程序管理</strong></p><p>Linux操作系统将<code>运行中的程序</code>称为<code>进程</code>。内核控制着Linux系统如何管理运行在系统上的所有进程。内核创建了第一个进程（称为<code>init进程</code>）来启动系统上所有其他进程。当内核启动时，它会将init进程加载到虚拟内存中。<code>内核在启动任何其他进程时，都会在虚拟内存中给新进程分配一块专有区域来存储该进程用到的数据和代码。</code><br>Linux操作系统的<code>init系统</code>采用了<code>运行级</code>。运行级决定了init进程运行<code>/etc/inittab文件</code>或<code>/etc/rcX.d目录</code>中定义好的某些特定类型的进程。Linux操作系统有5个启动运行级。</p><ul><li><code>运行级为1时，只启动基本的系统进程以及一个控制台终端进程。</code>称之为<code>单用户模式</code>。<br>通常用来在系统有问题时进行紧急的文件系统维护。在该这种模式下，只有系统管理员能登录到系统上操作数据。</li><li><code>标准的</code>启动运行级是<code>3</code>。在这个运行级上，大多数应用软件都会启动。</li><li>运行级为5时，系统会启动图形化的X Window系统，允许用户通过图形化桌面窗口登录系统。</li></ul><p><code>Linux系统可以通过调整启动运行级来控制整个系统的功能。</code></p><p><strong>3. 硬件设备管理</strong></p><p>内核的另一功能是管理硬件设备。任何Linux系统需要与之通信的设备，都需要在内核代码中加入其驱动程序代码。驱动程序代码相当于应用程序和硬件设备的中间人，允许内核与设备之间交换数据。<br>在Linux内核中有两种方法用于插入设备驱动代码：</p><ul><li>编译进内核的设备驱动代码。</li><li>可插入内核的设备驱动模块。</li><li>Linux系统将硬件设备当成特殊的文件，称为<code>设备文件</code>。<br>设备文件有3种分类：字符型设备文件、块设备文件、网络设备文件。</li><li><code>字符型设备文件</code>是指处理数据时每次只能处理一个字符的设备。大多数类型的<code>调制解调器和终端</code>都是作为字符型设备文件创建的。</li><li><code>块设备文件</code>是指处理数据时每次能处理大块数据的设备，如硬盘。</li><li><code>网络设备文件</code>是指采用数据包发送和接收数据的设备，包括各种网卡和一个特殊的回环设备。</li></ul><p>Linux为系统上的每个设备都创建一种称为节点的特殊文件。与设备的所有通信都通过设备节点完成。每个节点都有唯一的数值对供Linux内核标识它。数值对包括一个主设备号和一个次设备号。<br>文件系统管理</p><p><strong>4. 文件系统管理</strong><br>| 文件系统 | 描 述 |<br>|–|–|<br>| ext | Linux扩展文件系统 |<br>| ext2 | 第二扩展文件系统 |<br>| ext3 | 第三扩展文件系统，支持日志功能 |<br>| ext4 | 第四扩展文件系统，支持高级日志功能 |<br>|  jfs   | IBM日志文件系统 |<br>| iso9660  |  ISO 9660文件系统<code>CD-ROM</code> |<br>| minix  |  MINIX文件系统 |<br>| ncp  |  Netware文件系统 |<br>| hpfs |  OS/2高性能文件系统 |<br>| nfs  |  网络文件系统 |<br>| ntfs  |  支持Microsoft NT文件系统 |<br>| proc |    访问系统信息  |<br>| smb  |  支持网络访问的Samba SMB文件系统 |<br>| ReiserFS  |  高级Linux文件系统，能提供更好的性能和硬盘恢复功能 |<br>| XFS  |  高性能64位日志文件系统 |</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-Linux-内核功能&quot;&gt;&lt;a href=&quot;#1-Linux-内核功能&quot; class=&quot;headerlink&quot; title=&quot;1. Linux 内核功能&quot;&gt;&lt;/a&gt;1. Linux 内核功能&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;1. 系统内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux内核的主要功能之一是系统内存管理。内核不仅管理服务器上的可用&lt;code&gt;物理内存&lt;/code&gt;，还可以&lt;code&gt;创建和管理虚拟内存&lt;/code&gt;内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为&lt;code&gt;交换空间&lt;/code&gt;。
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C语言变量类型与基本运算符</title>
    <link href="http://yoursite.com/2020/02/10/C%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/02/10/C%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2020-03-26T02:49:19.390Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-C语言变量类型"><a href="#1-C语言变量类型" class="headerlink" title="1. C语言变量类型"></a>1. C语言变量类型</h5><p><img src="https://img-blog.csdnimg.cn/20200326104232853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dieHNoaQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h5 id="2-C语言基本运算符"><a href="#2-C语言基本运算符" class="headerlink" title="2. C语言基本运算符"></a>2. C语言基本运算符</h5><p><strong>（1）算数运算符</strong><br>在 C 语言编程中，加、减、乘、除和取余数的符号分别是：+、-、<em>、/、%。<br>运算符 ++ 是自加 1，–是自减 1。例如 <code>i++</code> 就是 i=i+1.<br>i++，i–：先使用变量的值，再执行变量加1或减1。<br>*</em>（2）赋值运算符**<br>“=”代表是赋值，而不是等于。例如 a=1;b=2;若 a = a+b;在 c 语言里的意思是把 a 加 b 的结果送给 a，那么运算完了之后的结果是 a 等于 3，b 还等于 2。<br><strong>（3）比较运算符</strong><br>“==”是进行是否等于判断的关系运算符，而“!=”就是不等于的关系运算符。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-C语言变量类型&quot;&gt;&lt;a href=&quot;#1-C语言变量类型&quot; class=&quot;headerlink&quot; title=&quot;1. C语言变量类型&quot;&gt;&lt;/a&gt;1. C语言变量类型&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200326104232853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dieHNoaQ==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
